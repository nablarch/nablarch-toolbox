#!/usr/bin/env node
'use strict';

require('sugar');

var jspReader = require('../lib/fileutil/jsp_file_reader')
  , fs = require('fs')
  , JspVerifier = require('../lib/jsp_verifier');

var argv = process.argv
  , out = process.stdout;

if(argv.length < 3) {
  out.write('Usage: node bin/jsp_verifier [<file>...]\n');
  process.exit(1);
}

var args = parseArguments(argv);

var verifier = createVerifier('../verification_config.json');

var results = args['targets'].reduce(function(res, path) {
  var jsp = jspReader.readFormatted(path, 'utf-8');

  return res.concat(verifier.verify(jsp, path));
}, []);

var hasViolation = results.length !== 0;

if(hasViolation) {
  out.write('Verification Failed!!\n');
  out.write(results.length + ' violations are found.\n');
  dumpResults(results);
} else {
  out.write('Verification Succeeded.\n')
}

process.exit(hasViolation ? 1 : 0);

/**
 * コマンドライン引数をパースし、以下のキーを持つJavaScriptオブジェクトとして返却する。
 *
 * command
 * : このツールの実行に利用された、実行ファイル名。（コマンドラインの第1引数）
 *
 * targets
 * : チェック対象とするファイルの一覧。（コマンドラインの残りの引数全て）
 *
 * @param argv コマンドライン引数
 * @returns {{}} コマンドライン引数をパースした結果のJavaScriptオブジェクト
 */
function parseArguments(argv) {
  var args = {};

  var command = argv.shift();
  args.command = command;

  while(command.match(/jsp_verifier$/)) {
    argv.shift();
  }

  args.targets = argv;
  return args;
}

/**
 * 引数に与えられた設定ファイルを読み込んで、JSPファイル検証クラス(JspVerifier)を生成する。
 *
 * @param configFile {String} 設定ファイル（JSONファイル）
 * @returns {JspVerifier} JSPファイル検証クラス
 */
function createVerifier(configFile) {
  var config = require(configFile);
  return  new JspVerifier(config);
}

/**
 * 検証結果をファイルに出力する。
 *
 * @param {Array} results 検証結果
 */
function dumpResults(results) {
  var dumpfile = "violations-" + new Date().getTime() + ".log";
  fs.writeFileSync(dumpfile, format(results));
  out.write('Detected violations are dumped to ' + dumpfile + '.\n');
}

/**
 * ログファイル出力用に、JSPファイルの検証結果をフォーマットする。
 *
 * @param {Array} results JSPファイルの検証結果
 * @returns {String} ログファイル出力用にフォーマットされた文字列
 */
function format(results) {
  return results.reduce(function(formatted, result) {
    return  formatted + "--------------------------------------------------------------------------------\n" +
            "File: " + result.path + "\n    Message: " + result.message + "\n    Verifier: " + result.verifier + "\n    Content:\n" +
            result.contents + "\n" +
            "--------------------------------------------------------------------------------\n\n";
  }, "")
}
